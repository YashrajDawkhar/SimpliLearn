(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/animations'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-go-top-button', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/animations', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,global['ng-go-top-button'] = {}, global.ng.core, global.ng.animations, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, animations, common) { 
var _c0 = ["*"];
'use strict';

    /**
     * Component for adding a go-to-top button to scrollable browser content
     */
    var NgGoTopButtonComponent = /** @class */ (function () {
        function NgGoTopButtonComponent() {
            this.animationState = 'out';
            this.timerID = null;
            /**
             * Go top button will appear when user scrolls Y to this position
             */
            this.scrollDistance = 200;
            /**
             * User styles config object
             */
            this.styles = {};
            /**
             * Classes to be applied to the button
             */
            this.classNames = 'go-top-button';
            /**
             * If true scrolling to top will be animated
             */
            this.animate = false;
            /**
             * Animated scrolling speed
             */
            this.speed = 80;
            /**
             * Acceleration coefficient, added to speed when using animated scroll
             */
            this.acceleration = 0;
            /**
             * Button tabIndex HTML attribute
             */
            this.tabIndex = 0;
        }
        NgGoTopButtonComponent.prototype.ngOnInit = function () {
            this.validateInputs();
        };
        NgGoTopButtonComponent.prototype.validateInputs = function () {
            var errorMessagePrefix = 'GoTopButton component input validation error: ';
            if (this.scrollDistance < 0) {
                throw Error(errorMessagePrefix + '\'scrollDistance\' parameter must be greater or equal to 0');
            }
            if (this.speed < 1) {
                throw Error(errorMessagePrefix + '\'speed\' parameter must be a positive number');
            }
            if (this.acceleration < 0) {
                throw Error(errorMessagePrefix + '\'acceleration\' parameter must be greater or equal to 0');
            }
            if (typeof this.classNames !== 'string') {
                throw Error(errorMessagePrefix + '\'classNames\' parameter must be a string like \'class1 class2 class3\'');
            }
        };
        /**
         * Listens to window scroll and animates the button
         */
        NgGoTopButtonComponent.prototype.onWindowScroll = function () {
            if (this.isBrowser()) {
                this.animationState = this.getCurrentScrollTop() > this.scrollDistance ? 'in' : 'out';
            }
        };
        /**
         * Scrolls window to top
         */
        NgGoTopButtonComponent.prototype.scrollTop = function (event) {
            if (!this.isBrowser()) {
                return;
            }
            event.preventDefault();
            if (this.animate) {
                this.animateScrollTop();
            }
            else {
                window.scrollTo(0, 0);
            }
        };
        /**
         * Performs the animated scroll to top
         */
        NgGoTopButtonComponent.prototype.animateScrollTop = function () {
            var _this = this;
            if (this.timerID !== null) {
                return;
            }
            var initialSpeed = this.speed;
            this.timerID = setInterval(function () {
                window.scrollBy(0, -initialSpeed);
                initialSpeed = initialSpeed + _this.acceleration;
                if (_this.getCurrentScrollTop() === 0) {
                    clearInterval(_this.timerID);
                    _this.timerID = null;
                }
            }, 15);
        };
        /**
         * Get current Y scroll position
         */
        NgGoTopButtonComponent.prototype.getCurrentScrollTop = function () {
            if (typeof window.scrollY !== 'undefined' && window.scrollY >= 0) {
                return window.scrollY;
            }
            if (typeof window.pageYOffset !== 'undefined' && window.pageYOffset >= 0) {
                return window.pageYOffset;
            }
            if (typeof document.body.scrollTop !== 'undefined' && document.body.scrollTop >= 0) {
                return document.body.scrollTop;
            }
            if (typeof document.documentElement.scrollTop !== 'undefined' && document.documentElement.scrollTop >= 0) {
                return document.documentElement.scrollTop;
            }
            return 0;
        };
        /**
         * Get button style
         */
        NgGoTopButtonComponent.prototype.getStyle = function () {
            return this.styles || {};
        };
        /**
         * This check will prevent 'window' logic to be executed
         * while executing the server rendering
         */
        NgGoTopButtonComponent.prototype.isBrowser = function () {
            return typeof (window) !== 'undefined';
        };
NgGoTopButtonComponent.ɵfac = function NgGoTopButtonComponent_Factory(t) { return new (t || NgGoTopButtonComponent)(); };
NgGoTopButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgGoTopButtonComponent, selectors: [["ng-go-top-button"]], hostBindings: function NgGoTopButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function NgGoTopButtonComponent_scroll_HostBindingHandler() { return ctx.onWindowScroll(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { scrollDistance: "scrollDistance", styles: "styles", classNames: "classNames", animate: "animate", speed: "speed", acceleration: "acceleration", tabIndex: "tabIndex" }, ngContentSelectors: _c0, decls: 2, vars: 4, consts: [["type", "button", "aria-label", "go to top of page", 3, "tabIndex", "ngStyle", "ngClass", "click"]], template: function NgGoTopButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function NgGoTopButtonComponent_Template_button_click_0_listener($event) { return ctx.scrollTop($event); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("tabIndex", ctx.tabIndex)("@appearInOut", ctx.animationState)("ngStyle", ctx.getStyle())("ngClass", ctx.classNames);
    } }, directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass], styles: [".go-top-button {\n      position: fixed;\n      cursor: pointer;\n      outline: none;\n      top: 50%;\n      bottom: 50%;\n      right: 0;\n      width: 35px;\n      height: 35px;\n      line-height: 35px;\n      text-decoration: none;\n      color: #ffffff;\n      background: rgba(0, 0, 0, 0.3);\n      border: none;\n      border-radius: 3px 0 0 3px;\n    }\n\n    .go-top-button:hover, .go-top-button:focus {\n      background-color: rgba(0, 0, 0, 0.6);\n      text-decoration: none;\n      color: white;\n    }"], encapsulation: 2, data: { animation: [
            animations.trigger('appearInOut', [
                animations.state('in', animations.style({
                    opacity: '0.85'
                })),
                animations.state('out', animations.style({
                    opacity: '0'
                })),
                animations.transition('in => out', animations.animate('400ms ease-in-out')),
                animations.transition('out => in', animations.animate('400ms ease-in-out'))
            ]),
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgGoTopButtonComponent, [{
        type: core.Component,
        args: [{
                selector: 'ng-go-top-button',
                template: "\n    <button type=\"button\" aria-label=\"go to top of page\"\n            [tabIndex]=\"tabIndex\"\n            [@appearInOut]=\"animationState\"\n            (click)=\"scrollTop($event)\"\n            [ngStyle]=\"getStyle()\"\n            [ngClass]=\"classNames\">\n      <ng-content></ng-content>\n    </button>",
                encapsulation: core.ViewEncapsulation.None,
                animations: [
                    animations.trigger('appearInOut', [
                        animations.state('in', animations.style({
                            opacity: '0.85'
                        })),
                        animations.state('out', animations.style({
                            opacity: '0'
                        })),
                        animations.transition('in => out', animations.animate('400ms ease-in-out')),
                        animations.transition('out => in', animations.animate('400ms ease-in-out'))
                    ]),
                ],
                styles: [".go-top-button {\n      position: fixed;\n      cursor: pointer;\n      outline: none;\n      top: 50%;\n      bottom: 50%;\n      right: 0;\n      width: 35px;\n      height: 35px;\n      line-height: 35px;\n      text-decoration: none;\n      color: #ffffff;\n      background: rgba(0, 0, 0, 0.3);\n      border: none;\n      border-radius: 3px 0 0 3px;\n    }\n\n    .go-top-button:hover, .go-top-button:focus {\n      background-color: rgba(0, 0, 0, 0.6);\n      text-decoration: none;\n      color: white;\n    }"]
            }]
    }], function () { return []; }, { scrollDistance: [{
            type: core.Input
        }], styles: [{
            type: core.Input
        }], classNames: [{
            type: core.Input
        }], animate: [{
            type: core.Input
        }], speed: [{
            type: core.Input
        }], acceleration: [{
            type: core.Input
        }], tabIndex: [{
            type: core.Input
        }], onWindowScroll: [{
            type: core.HostListener,
            args: ['window:scroll', []]
        }] }); })();
        return NgGoTopButtonComponent;
    }());
    NgGoTopButtonComponent.propDecorators = {
        scrollDistance: [{ type: core.Input }],
        styles: [{ type: core.Input }],
        classNames: [{ type: core.Input }],
        animate: [{ type: core.Input }],
        speed: [{ type: core.Input }],
        acceleration: [{ type: core.Input }],
        tabIndex: [{ type: core.Input }],
        onWindowScroll: [{ type: core.HostListener, args: ['window:scroll', [],] }]
    };

    var GoTopButtonModule = /** @class */ (function () {
        function GoTopButtonModule() {
        }
GoTopButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GoTopButtonModule });
GoTopButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GoTopButtonModule_Factory(t) { return new (t || GoTopButtonModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GoTopButtonModule, { declarations: [NgGoTopButtonComponent], imports: [ɵngcc1.CommonModule], exports: [NgGoTopButtonComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GoTopButtonModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [NgGoTopButtonComponent],
                exports: [NgGoTopButtonComponent]
            }]
    }], function () { return []; }, null); })();
        return GoTopButtonModule;
    }());

    /*
     * Public API Surface of ng-go-top-button
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.GoTopButtonModule = GoTopButtonModule;
    exports.NgGoTopButtonComponent = NgGoTopButtonComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-go-top-button.umd.js.map